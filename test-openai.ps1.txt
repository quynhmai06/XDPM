Write-Host "=== OpenAI API Quick Test ===" -ForegroundColor Cyan

# 1Ô∏è‚É£ Nh·∫≠p key n·∫øu ch∆∞a c√≥
if (-not $env:OPENAI_API_KEY) {
    $env:OPENAI_API_KEY = Read-Host "Nh·∫≠p API key (b·∫Øt ƒë·∫ßu b·∫±ng sk- ho·∫∑c sk-proj-)"
}
if (-not $env:OPENAI_ORG) {
    $env:OPENAI_ORG = Read-Host "Nh·∫≠p Organization ID (n·∫øu c√≥, v√≠ d·ª• org-xxxx)"
}
if (-not $env:OPENAI_PROJECT) {
    $env:OPENAI_PROJECT = Read-Host "Nh·∫≠p Project ID (n·∫øu c√≥, v√≠ d·ª• proj_xxxx)"
}

Write-Host "`nüëâ Testing connection..." -ForegroundColor Yellow

# 2Ô∏è‚É£ T·∫°o headers
$headers = @{
    "Authorization" = "Bearer $env:OPENAI_API_KEY"
}
if ($env:OPENAI_ORG) { $headers["OpenAI-Organization"] = $env:OPENAI_ORG }
if ($env:OPENAI_PROJECT) { $headers["OpenAI-Project"] = $env:OPENAI_PROJECT }

# 3Ô∏è‚É£ G·ªçi API
try {
    $response = Invoke-WebRequest "https://api.openai.com/v1/models" -Headers $headers -ErrorAction Stop
    $json = $response.Content | ConvertFrom-Json
    Write-Host "`n‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!" -ForegroundColor Green
    Write-Host "C√°c model kh·∫£ d·ª•ng:" -ForegroundColor Cyan
    $json.data | Select-Object id | ForEach-Object { $_.id } | Sort-Object | Select-Object -First 10
}
catch {
    Write-Host "`n‚ùå L·ªói khi g·ªçi API:" -ForegroundColor Red
    if ($_.Exception.Response -and $_.Exception.Response.ContentLength -gt 0) {
        $body = New-Object IO.StreamReader($_.Exception.Response.GetResponseStream()).ReadToEnd()
        Write-Host $body -ForegroundColor Red
    } else {
        Write-Host $_.Exception.Message -ForegroundColor Red
    }
}

Write-Host "`n--- K·∫øt th√∫c ki·ªÉm tra ---" -ForegroundColor Cyan
Pause
